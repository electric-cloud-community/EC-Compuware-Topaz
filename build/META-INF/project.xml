<exportedData buildLabel="build_3.5_30434_OPT_2010.01.13_07:32:22" buildVersion="3.5.1.30434" version="39">
  <exportPath>/projects/EC-Compuware-Topaz-1.0.0.7</exportPath>
  <project>
    <projectName>EC-Compuware-Topaz-1.0.0.7</projectName>
    <propertySheet>
      <property>
        <expandable>0</expandable>
        <propertyName>ec_setup</propertyName>
        <value>use Cwd;&#xA;use File::Spec;&#xA;use POSIX;&#xA;my $dir = getcwd;&#xA;my $logfile =&#34;&#34;;&#xA;my $pluginDir;&#xA;&#xA;&#xA;if ( defined $ENV{QUERY_STRING} ) {    # Promotion through UI&#xA;    $pluginDir = $ENV{COMMANDER_PLUGINS} . &#34;/$pluginName&#34;;&#xA;}&#xA;else {&#xA;    my $commanderPluginDir = $commander-&gt;getProperty(&#39;/server/settings/pluginsDirectory&#39;)-&gt;findvalue(&#39;//value&#39;);&#xA;    unless ( $commanderPluginDir &amp;&amp; -d $commanderPluginDir ) {&#xA;        die &#34;Cannot find commander plugin dir, please ensure that the option server/settings/pluginsDirectory is set up correctly&#34;;&#xA;    }&#xA;    $pluginDir = File::Spec-&gt;catfile($commanderPluginDir, $pluginName);&#xA;}&#xA;&#xA;$logfile .= &#34;Plugin directory is $pluginDir&#34;;&#xA;&#xA;$commander-&gt;setProperty(&#34;/plugins/$pluginName/project/pluginDir&#34;, {value=&gt;$pluginDir});&#xA;$logfile .= &#34;Plugin Name: $pluginName\n&#34;;&#xA;$logfile .= &#34;Current directory: $dir\n&#34;;&#xA;&#xA;# Evaluate promote.groovy or demote.groovy based on whether plugin is being promoted or demoted ($promoteAction)&#xA;local $/ = undef;&#xA;# If env variable QUERY_STRING exists:&#xA;my $dslFilePath;&#xA;if(defined $ENV{QUERY_STRING}) { # Promotion through UI&#xA;    $dslFilePath = File::Spec-&gt;catfile($ENV{COMMANDER_PLUGINS}, $pluginName, &#34;dsl&#34;, &#34;$promoteAction.groovy&#34;);&#xA;} else {  # Promotion from the command line&#xA;    $dslFilePath = File::Spec-&gt;catfile($pluginDir, &#34;dsl&#34;, &#34;$promoteAction.groovy&#34;);&#xA;}&#xA;&#xA;open FILE, $dslFilePath or die &#34;Couldn&#39;t open file: $dslFilePath: $!&#34;;&#xA;my $dsl = &lt;FILE&gt;;&#xA;close FILE;&#xA;my $dslReponse = $commander-&gt;evalDsl(&#xA;    $dsl, {&#xA;        parameters =&gt; qq(&#xA;                     {&#xA;                       &#34;pluginName&#34;:&#34;$pluginName&#34;,&#xA;                       &#34;upgradeAction&#34;:&#34;$upgradeAction&#34;,&#xA;                       &#34;otherPluginName&#34;:&#34;$otherPluginName&#34;&#xA;                     }&#xA;              ),&#xA;        debug             =&gt; &#39;false&#39;,&#xA;        serverLibraryPath =&gt; File::Spec-&gt;catdir( $pluginDir, &#39;dsl&#39; ),&#xA;    },&#xA;);&#xA;&#xA;&#xA;$logfile .= $dslReponse-&gt;findnodes_as_string(&#34;/&#34;);&#xA;&#xA;my $errorMessage = $commander-&gt;getError();&#xA;&#xA;# Create output property for plugin setup debug logs&#xA;my $nowString = localtime;&#xA;$commander-&gt;setProperty( &#34;/plugins/$pluginName/project/logs/$nowString&#34;, { value =&gt; $logfile } );&#xA;&#xA;die $errorMessage unless !$errorMessage&#xA;</value>
      </property>
    </propertySheet>
  </project>
</exportedData>